
define table: python_expression_to_method_lut

	expression					method
	----------					------
	len(a)						a.__len__()
	a in b						b.__contains__(a)

	a < b						a.__lt__(b)
	a <= b						a.__le__(b)
	a == b						a.__eq__(b)
	a != b						a.__ne__(b)
	a > b						a.__gt__(b)
	a => b						a.__ge__(b)

	~a							a.__invert__()
	-a							a.__neg__()
	+a							a.__pos__()
	abs(a)						a.__abs__()

	a | b						a.__or__(b)
	a & b						a.__and__(b)
	a ^ b						a.__xor__(b)

	a + b						a.__add__(b)
	a - b						a.__sub__(b)
	a * b						a.__mul__(b)
	a / b						a.__truediv__(b)
	a % b						a.__mod__(b)

	a |= b						a.__ior__(b)
	a &= b						a.__iand__(b)
	a ^= b						a.__ixor__(b)

	a += b						a.__iadd__(b)
	a -= b						a.__isub__(b)
	a *= b						a.__imul__(b)
	a /= b						a.__itruediv__(b)
	a %= b						a.__imod__(b)



define api for set:

	len(set)
		Return the number of elements in {set} (cardinality of {set}).

	element in set
		Test {element} for membership in {set}.

	set.isdisjoint(other)
		Return {True} if the {set} has no elements in common with {other}. Sets are disjoint if and only if their intersection is the empty {set}.

	set.issubset(other), set <= other
		Test whether every element in the {set} is in {other}.

	set < other
		Test whether the {set} is a proper subset of {other}, that is, `set <= other and set != other´.

	set.issuperset(other), set >= other
		Test whether every element in {other} is in the {set}.

	set > other
		Test whether the {set} is a proper superset of {other}, that is, `set >= other and set != other´.

	set.union(*others), set | other | ...
		Return a new {set} with elements from the {set} and all {others}.

	set.intersection(*others), set & other & ...
		Return a new {set} with elements common to the {set} and all {others}.

	set.difference(*others), set - other - ...
		Return a new {set} with elements in the {set} that are not in the {others}.

	set.symmetric_difference(other), set ^ other
		Return a new {set} with elements in either the {set} or {other} but not both.

	set.copy
		Return a shallow copy of the {set}.

	set.update(*others), set |= other | ...
		Update the {set}, adding elements from all {others}.

	set.intersection_update(*others), set &= other = ...
		Update the {set}, keeping only elements found in it and all {others}.

	set.difference_update(*others), set -= other | ...
		Update the {set}, removing elements found in {others}.

	set.symmetric_difference_update(other), set ^= other
		Update the {set}, keeping only elements found in either {set}, but not in both.

	set.add(element)
		Add {element} to the {set}.

	set.remove(element)
		Remove {element} from the {set}. Raises {KeyError} if {element} is not contained in the {set}.

	set.discard(element)
		Remove {element} from the {set} if it is present.

	set.pop()
		Remove and return an arbitrary element from the {set}. Raises {KeyError} if the {set} is empty.

	set.clear()
		Remove all elements from the {set}.



